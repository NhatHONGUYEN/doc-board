datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
}

// Define Role Enum
enum Role {
  PATIENT
  DOCTOR
}

model User {
  id             String          @id @default(cuid())
  name           String          @unique
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  password       String? // Hashed password
  role           Role            @default(PATIENT) // User role, default is PATIENT
  accounts       Account[]
  sessions       Session[]
  authenticators Authenticator[]

  // Relations with specific profiles
  patientProfile Patient?
  doctorProfile  Doctor?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Patient {
  id                   String    @id @default(cuid())
  userId               String    @unique
  birthDate            DateTime?
  address              String?
  phone                String?
  socialSecurityNumber String?
  medicalHistory       String?

  // Relation to User
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relation to appointments
  appointments Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Doctor {
  id            String  @id @default(cuid())
  userId        String  @unique
  specialty     String?
  licenseNumber String? // Professional identification number
  phone         String?
  officeAddress String?
  description   String? // Doctor description, areas of expertise, etc.

  // Relation to User
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relation to appointments
  appointments Appointment[]

  // Doctor availability schedule
  availabilities Availability[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  DoctorAvailability DoctorAvailability[]
}

model Appointment {
  id              String   @id @default(cuid())
  date            DateTime
  duration        Int // Duration in minutes
  reason          String?
  notes           String?
  status          String // "confirmed", "cancelled", "pending", etc.
  appointmentType String? // Add this field

  patientId String
  patient   Patient @relation(fields: [patientId], references: [id])

  doctorId String
  doctor   Doctor @relation(fields: [doctorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Availability {
  id        String @id @default(cuid())
  day       Int // 0-6 for Monday-Sunday
  startTime String // Format "HH:MM"
  endTime   String // Format "HH:MM"

  doctorId String
  doctor   Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DoctorAvailability {
  id             String   @id @default(cuid())
  doctorId       String   @unique
  doctor         Doctor   @relation(fields: [doctorId], references: [id])
  weeklySchedule Json // Stored as JSON string
  specialDates   Json // Stored as JSON string
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@index([userId]) // Index to optimize queries
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId]) // Index to optimize queries
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
